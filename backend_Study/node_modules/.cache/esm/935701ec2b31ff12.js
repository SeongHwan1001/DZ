let Joi,User;_2b3‍.x([["register",()=>register],["login",()=>login],["check",()=>check],["logout",()=>logout]]);_2b3‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_2b3‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);

/*
회원가입
POST /api/auth/register
{
    username: 'velopert',
    password: 'mypass123'
}
*/
       const register = async ctx => {
   /* Request Body 검증하기 */
   // =============================================
   const schema = Joi.object().keys({
      username: Joi.string()
         .alphanum()
         .min(3)
         .max(20)
         .required(),
      password: Joi.string().required(),
   });
   const result = Joi.validate(ctx.request.body, schema);
   if (result.error) {
      ctx.status = 400;
      ctx.body = result.error;
      return;
   }
   // =============================================
   const { username, password } = ctx.request.body;
   try {
      // username이 이미 존재하는지 확인
      const exists = await User.findByUsername(username);
      if (exists) {
         ctx.status = 409; // Conflict
         return;
      }
      const user = new User({
         username,
      });
      await user.setPassword(password); // 비밀번호 설정
      await user.save(); // 데이터베이스에 저장

      // 응답할 데이터에서 hashedPassword 필드 제거
      // hashedPassword 필드가 응답되지 않도록 하기 위함, password의 보안!!!!
      ctx.body = user.serialize();

      /*
      회원가입 즉, register 가 완료되면 사용자에게 토큰을 전달
       사용자 토큰을 쿠키에 담아서 사용 
       */
      // ----------------------------------------------------
      const token = user.generateToken();
      ctx.cookies.set('access_token', token, {
         maxAge: 1000 * 60 * 60 * 24 * 7, // 7일
         /* httpOnly 라는 속성을 활설화면 자바스크립트를 통해 쿠키를 조회 할 수 없으므로
         악성 스크립트로 부터 안전하다. */
         httpOnly: true,
      });
      // ----------------------------------------------------
   } catch (e) {
      ctx.throw(500, e);
   }
};

/*
로그인
POST /api/auth/login
{
   username: 'velopert',
   password: 'mypass123'
}
 */
       const login = async ctx => {
   const { username, password } = ctx.request.body;

   // username, password가 없으면 에러 처리
   if (!username || !password) {
      ctx.status = 401; // Unauthorized
      return;
   }

   try {
      const user = await User.findByUsername(username);
      // 계정이 존재하지 않으면 에러 처리
      if (!user) {
         ctx.status = 401;
         return;
      }

      const valid = await user.checkPassword(password);
      // 잘못된 비밀번호
      if (!valid) {
         ctx.status = 401;
         return;
      }
      ctx.body = user.serialize();

      /*
      로그인 즉, login 가 완료되면 사용자에게 토큰을 전달
       사용자 토큰을 쿠키에 담아서 사용 
       */
      // ----------------------------------------------------
      const token = user.generateToken();
      ctx.cookies.set('access_token', token, {
         maxAge: 1000 * 60 * 60 * 24 * 7, // 7일
         /* httpOnly 라는 속성을 활설화면 자바스크립트를 통해 쿠키를 조회 할 수 없으므로
         악성 스크립트로 부터 안전하다. */
         httpOnly: true,
      });
      // ----------------------------------------------------
   } catch (e) {
      ctx.throw(500, e);
   }
};

/*
로그인 상태 확인
GET /api/auth/check
 */
       const check = async ctx => {
   const { user } = ctx.state;
   if (!user) {
      // 로그인 중 아님
      ctx.status = 401; // Unanthorized
      return;
   }
   ctx.body = user;
};

/*
로그아웃
POST /api/auth/logout
 */
       const logout = async ctx => {
   ctx.cookies.set('sccess_token');
   ctx.status = 204; // No Content
};
